<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="4" passed="0" failed="1" skipped="3">
  <reporter-output>
  </reporter-output>
  <suite started-at="2018-06-18T12:41:55Z" name="Default suite" finished-at="2018-06-18T12:41:55Z" duration-ms="362">
    <groups>
    </groups>
    <test started-at="2018-06-18T12:41:55Z" name="Default test" finished-at="2018-06-18T12:41:55Z" duration-ms="362">
      <class name="com.companyname.projectname.testscripts.Test1">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="beforeMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.companyname.projectname.testscripts.Test1.testReport1() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testReport1()[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="testReport1" finished-at="2018-06-18T18:11:55Z" duration-ms="6" status="FAIL">
          <exception class="java.io.FileNotFoundException">
            <message>
              <![CDATA[/Users/ghazalashahin/pageobjectmodel-seleniumFramework/src/test/java/com/companyname/projectname/report/TestHtmlReport.html (No such file or directory)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.io.FileNotFoundException: /Users/ghazalashahin/pageobjectmodel-seleniumFramework/src/test/java/com/companyname/projectname/report/TestHtmlReport.html (No such file or directory)
	at java.base/java.io.FileOutputStream.open0(Native Method)
	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:299)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:238)
	at java.base/java.io.FileWriter.<init>(FileWriter.java:107)
	at com.companyname.projectname.testbase.TestBase.updateResult(TestBase.java:188)
	at com.companyname.projectname.testscripts.Test1.testReport1(Test1.java:17)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.io.FileNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReport1 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="afterMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="0" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReport1 status=FAILURE method=Test1.testReport1()[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da] output={null}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at com.companyname.projectname.testbase.TestBase.captureScreen(TestBase.java:274)
	at com.companyname.projectname.testbase.TestBase.getresult(TestBase.java:238)
	at com.companyname.projectname.testbase.TestBase.afterMethod(TestBase.java:247)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:786)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="beforeMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testReport2()[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="testReport2" finished-at="2018-06-18T18:11:55Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReport2 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="afterMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="beforeMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testReport3()[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="testReport3" finished-at="2018-06-18T18:11:55Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReport3 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="afterMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="beforeMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testReport4()[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="testReport4" finished-at="2018-06-18T18:11:55Z" duration-ms="1" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReport4 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="afterMethod" finished-at="2018-06-18T18:11:55Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="endTest()[pri:0, instance:com.companyname.projectname.testscripts.Test1@2b9ed6da]" started-at="2018-06-18T18:11:55Z" name="endTest" finished-at="2018-06-18T18:11:55Z" duration-ms="310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
      </class> <!-- com.companyname.projectname.testscripts.Test1 -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
